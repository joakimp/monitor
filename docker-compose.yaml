---
version: "3"
services:
    # cAdvisor collect data from docker host machine
    cadvisor: 
        image: gcr.io/cadvisor/cadvisor:v0.37.5
        container_name: cadvisor
        privileged: true
        environment:
            - PUID=1026     # <-- Change to desired user at the docker host
            - PGID=100      # <-- Change to desired group at the docker host
            - TZ=Europe/Stockholm
            - device=/dev/kmsg
        volumes:
            - /:/rootfs:ro
            - /var/run:/var/run:ro
            - /sys:/sys:ro
            #- /var/lib/docker:/var/lib/docker:ro # This is for most linux systems
            - /volume1/@docker:/var/lib/docker:ro # This is for dockers on synology
            #- /dev/disk/:/dev/disk:ro # Many linux systems, not available on synology
        ports:
            - 8085:8080 # <-- Change port mapping to fit the host running docker containers
        restart: unless-stopped
        
    #unifi-poller collects data from unifi equipment
    unifi-poller:
        image: golift/unifi-poller:${POLLER_TAG}
        container_name: unifi-poller
        restart: unless-stopped
        ports:
            - '9130:9130'
        volumes: 
            - up-config:/etc/env_up
        env_file:
            - '/etc/env_up/unifi-poller.env'
        environment:
            #- UP_INFLUXDB_DB=${INFLUXDB_DB}
            #- UP_INFLUXDB_USER=${INFLUXDB_ADMIN_USER}
            #- UP_INFLUXDB_PASS=${INFLUXDB_ADMIN_PASSWORD}
            #- UP_INFLUXDB_URL=http://influxdb:8086
            - UP_UNIFI_DEFAULT_USER=${UNIFI_USER}
            - UP_UNIFI_DEFAULT_PASS=${UNIFI_PASS}
            - UP_UNIFI_DEFAULT_URL=${UNIFI_URL}
            - UP_POLLER_DEBUG=${POLLER_DEBUG}
            - UP_UNIFI_DEFAULT_SAVE_DPI=${POLLER_SAVE_DPI}
            - UP_INFLUXDB_DISABLE="true"
            - UP_POLLER_DEBUG="false"
            - UP_UNIFI_DYNAMIC="false"
            - UP_PROMETHEUS_HTTP_LISTEN=0.0.0.0:9130
            - UP_PROMETHEUS_NAMESPACE=${UNIFI_PROMETHEUS_NS}
            - UP_UNIFI_CONTROLLER_0_SAVE_ALARMS="true"
            - UP_UNIFI_CONTROLLER_0_SAVE_ANOMALIES="true"
            - UP_UNIFI_CONTROLLER_0_SAVE_DPI="true"
            - UP_UNIFI_CONTROLLER_0_SAVE_EVENTS="true"
            - UP_UNIFI_CONTROLLER_0_SAVE_IDS="true"
            - UP_UNIFI_CONTROLLER_0_SAVE_SITES="true"
            - UP_UNIFI_CONTROLLER_0_URL=${UNIFI_URL}
            - UP_UNIFI_CONTROLLER_0_USER=${UNIFI_USER}
            - UP_UNIFI_CONTROLLER_0_PASS=${UNIFI_PASS}
             

    # node-exporter for data relating to the host.
    # node-exporter:
    #     image: prom/node-exporter:latest
    #     container_name: monitoring_node_exporter
    #     restart: unless-stopped
    #     expose:
    #       - 9100
          

    # SNMP for data exported by the host
    snmp:
        image: quay.io/prometheus/snmp-exporter
        #image: ricardbejarano/snmp_exporter
        volumes:
          - /volume1/docker/snmp_exporter:/etc/snmp_exporter
        ports:
          - 9116:9116
          - 116:116/udp
        restart: always
        command: --config.file=/etc/snmp_exporter/snmp.yml
    
    

    # Prometheus stores the data that is collected by cAdvisor
    prometheus:
        image: prom/prometheus
        container_name: prometheus
        command: --config.file=/etc/prometheus/prometheus.yaml   --storage.tsdb.path=/prometheus
        environment:
            - PUID=99     # <-- This is UID for the user nobody
            - PGID=99      # <-- This is GID for the group nobody
            - TZ=Europe/Stockholm
        volumes:
            - prometheus-config:/etc/prometheus
            - prometheus-data:/prometheus
        ports:
            - 9090:9090
        restart: unless-stopped
        
        

    # Grafana will plot some nice graphs based on the stored data
    grafana:
        image: grafana/grafana
        container_name: grafana
        depends_on:
            - prometheus
        env_file:
            - '/etc/grafana/grafana.env'
        environment:
            - PUID=1026     # <-- Change to desired user at the docker host
            - PGID=100      # <-- Change to desired group at the docker host
            - TZ=Europe/Stockholm
            - GF_SECURITY_ADMIN_USER=${GRAFANA_USERNAME}  # Usually this will be 'admin'
            - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}  # Change after first login
            - GF_SECURITY_ALLOW_EMBEDDING=true  # Make dashboard show up in iframe
            - GF_AUTH_ANONYMOUS_ENABLED=true  # Enable anonymous access...
            - GF_AUTH_ANONYMOUS_ORG_NAME=${GRAFANA_ORGNAME}  # for graphs belonging to this organisation Anomusers
            - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer  #...with all users in the viewer role
            - GF_INSTALL_PLUGINS=grafana-clock-panel,natel-discrete-panel,grafana-piechart-panel
        volumes:
            #- /volume1/docker/grafana/config:/etc/grafana
            #- /volume1/docker/grafana/data:/var/lib/grafana
            - grafana-config:/etc/grafana
            - grafana-data:/var/lib/grafana
        ports:
            - 3000:3000
        restart: unless-stopped

volumes:
    up-config:       # For storing the environment file...
        external: true
    prometheus-config:      # The volume existed before docker-compose was run...
        external: true    
    prometheus-data:        # The volume existed before docker-compose was run...
        external: true
    grafana-config:         # The volume existed before docker-compose was run...
        external: true    
    grafana-data:           # The volume existed before docker-compose was run...
        external: true